#Note installing OpenCV
#OpenCV4 mac OSX: https://www.learnopencv.com/install-opencv-4-on-macos/
#OpenCV4 ubuntu 16.04 https://www.learnopencv.com/install-opencv-4-on-ubuntu-16-04/
#OpenCV3 ubuntu 16.04 https://www.learnopencv.com/install-opencv3-on-ubuntu/
#OpenCV4 raspberry pi https://www.learnopencv.com/install-opencv-4-on-raspberry-pi/

before installing for raspberry pi, modeify the swap space:
#https://blog.csdn.net/wxz3wxz/article/details/70237302
###################################################################################################################################################################################################
使用树莓派编译程序的时候，我遇到了程序比较大，编译到某个文件的时候树莓派会死机，关机之后重启可以继续使用，但是编译到同一个地方树莓派又死机的问题。

这个问题出现的主要原因是我给树莓派安装的Ubuntu mate 16.04 系统默认设置的swap交换空间不够，而编译某些文件的时候需要较大的交换空间，树莓派的交换空间被用满所以树莓派看起来好像是死机了的样子。

解决方法，扩展Ubuntu的交换空间。
这里使用的方法参照了前人的博客，深表感谢。

第一步：确保系统中有足够的空间来用做swap交换空间，我准备在一个独立的文件系统中添加一个swap交换文件，在/opt/image中添加2G的swap交换文件

sudo mkdir image
sudo touch swap

第二步：添加交换文件并设置其大小为2G，使用如下命令

sudo dd if=/dev/zero of=/opt/image/swap bs=1024 count=2048000

过段时间就返回如下结果：
2048000+0 records in
2048000+0 records out
2097152000 bytes (2.1 GB, 2.0 GiB) copied, 242.095 s, 8.7 MB/s

PS：这个步骤说的好像很快的样子，但是给我等的都有点怀疑人生了，我一度以为又死机了，重启了2次，最后耐下心来等了几分钟，终于成功了，眼泪都要掉下来了。



第三步：创建（设置）交换空间，使用命令mkswap

sudo mkswap /opt/image/swap


Setting up swapspace version 1, size = 2 GiB (2097147904 bytes)


第四步：检查现有的交换空间大小，使用命令free

free -m


              total        used        free      shared  buff/cache   available
Mem:            925         185          28          14         711         660
Swap:             0           0           0

或者检查meminfo文件

grep SwapTotal  /proc/meminfo


第五步：启动新增加的2G的交换空间，使用命令swapon

sudo swapon /opt/image/swap


第六步:确认新增加的2G交换空间已经生效，使用命令free
free -m


              total        used        free      shared  buff/cache   available
Mem:            925         328          56          32         541         502
Swap:          1999           0        1999

或者检查meminfo文件

grep SwapTotal  /proc/meminfo


第七步：修改/etc/fstab文件，使得新加的2G交换空间在系统重新启动后自动生效
sudo vim /etc/fstab
在文件最后加入：

/opt/image/swap    /swap    swap    defaults 0 0

重启之后再次编译，YES，成功！！
###################################################################################################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

when installing for raspberry pi, the cmake option can be modified to:
cmake -D CMAKE_BUILD_TYPE=RELEASE \
            -D CMAKE_INSTALL_PREFIX=$cwd/installation/OpenCV-"$cvVersion" \
            -D INSTALL_C_EXAMPLES=OFF \
            -D INSTALL_PYTHON_EXAMPLES=OFF \
            -D WITH_TBB=ON \
            -D WITH_V4L=ON \
        -D WITH_QT=ON \
        -D WITH_OPENGL=ON \
        -D BUILD_EXAMPLES=OFF ..

in order to simpify the installation.

#2019.6.14

#try to valid ncnn on tx2 and raspberry pi
##tx2
##https://github.com/Tencent/ncnn/wiki/how-to-build#build-for-nvidia-jetson
###################################################################################################################################################################################################
#download Vulkan SDK from NVIDIA
#please click the Vulkan SDK File link on https://developer.nvidia.com/embedded/vulkan, at the time of writing we got Vulkan_loader_demos_1.1.100.tar.gz

scp the downloaded SDK to your Jetson device

#install Vulkan SDK
#unzip Vulkan_loader_demos_1.1.100.tar.gz
cd ~/Vulkanloader_demos_1.1.100
sudo cp loader/libvulkan.so.1.1.100 /usr/lib/aarch64-linux-gnu/
cd /usr/lib/aarch64-linux-gnu/
sudo rm -rf libvulkan.so.1 libvulkan.so
sudo ln -s libvulkan.so.1.1.100 libvulkan.so
sudo ln -s libvulkan.so.1.1.100 libvulkan.so.1
cd ~/
#install glslang dependency
# glslang is a dependency of Tencent/ncnn
git clone --depth=1 https://github.com/KhronosGroup/glslang.git
cd glslang
# assure that SPIR-V generated from HLSL is legal for Vulkan
./update_glslang_sources.py
mkdir -p build && cd build
sudo make -j`nproc` install && cd ..
#compile ncnn
git clone https://github.com/Tencent/ncnn.git
# while aarch64-linux-gnu.toolchain.cmake would compile Tencent/ncnn as well
# but why not compile with more native features w
cd ncnn && mkdir -p build && cd build
cmake -DCMAKE_TOOLCHAIN_FILE=../toolchains/jetson.toolchain.cmake -DNCNN_VULKAN=ON -DCMAKE_BUILD_TYPE=Release ..
make -j`nproc`
sudo make install
###################################################################################################################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#some thing wrong with the cmake procedure:
#Could NOT find Vulkan (missing: Vulkan_INCLUDE_DIR) 
#add/modify the following lines:
if(NCNN_VULKAN)
    set(Vulkan_INCLUDE_DIR /home/etcvision/Desktop/Vulkanloader_demos_1.1.100/include)
    find_package(Vulkan REQUIRED)
    include_directories(${Vulkan_INCLUDE_DIR})

##raspberry pi 3b+

#2019.6.20
#DEBUG UART CODE
ERROR "Undefined symbols for architecture x86_64:"
ERROR "ld: symbol(s) not found for architecture x86_64" again
However the project can run using "run" directly, why???

change the whole project into a CMake project. Now can be built through CMakeList. Congrad!

#2019.6.24
Successfully enable mulpi-thread CPU on Jetson TX2
in CMakefile in ncnn root
"option(NCNN_OPENMP "openmp support" ON)"
in Cmakefile in ncnn/example
"target_link_libraries(main_PC -pthread -fopenmp ${OpenCV_LIBS} ${NCNN_EXAMPLE_LINK_LIBRARIES} Cooktop_API)"

Successfully enable NCNN GPU on Jetson TX2
can refer to the mobilenetv2ssdlite.cpp

##add the .h file
#include "gpu.h"

##after creat the ncnn::Net instance:
#if NCNN_VULKAN
    mobilenetv2.opt.use_vulkan_compute = true;
#endif // NCNN_VULKAN

##before detect funtion
#if NCNN_VULKAN
    ncnn::create_gpu_instance();
#endif // NCNN_VULKAN

##after detect funtion
#if NCNN_VULKAN
    ncnn::destroy_gpu_instance();
#endif // NCNN_VULKAN

done

#2019.6.25














































